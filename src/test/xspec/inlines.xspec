<?xml version="1.0" encoding="utf-8"?>
<x:description xmlns:h="http://www.w3.org/1999/xhtml"
               xmlns:m="http://docbook.org/ns/docbook/modes"
               xmlns:x="http://www.jenitennison.com/xslt/xspec"
               stylesheet="../xspec-xslt/xspec-driver.xsl">

<!-- Tests:
     abbrev accel acronym anchor application citation citebiblioid
     citetitle classname code command computeroutput constant database
     date email emphasis envar errorcode errorname errortext errortype
     example exceptionname filename firstname firstterm foreignphrase
     function givenname glossterm guibutton guiicon guilabel guimenu
     guimenuitem guisubmenu hardware imagedata imageobject info
     initializer inlinemediaobject interfacename itemizedlist jobtitle
     keycap keycode keysym listitem literal markup member methodname
     modifier mousebutton option optional orgname othername package
     para parameter person personname phrase productname productnumber
     prompt property quote replaceable returnvalue simplelist
     subscript superscript surname symbol systemitem tag title token
      trademark type userinput varname wordasword
-->

<!-- ============================================================ -->
<!-- inline tests. These are the "by hand" tests for the inlines
     with interesting semantics. Most inlines are tested with
     generated tests.
-->

<x:scenario label="When converting an anchor element with an xml:id and roles">
   <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
      <anchor xml:id="d1e32" role="a c b"/>
   </x:context>
   <x:expect label="it should return a single a element" test="count(/*) = 1 and /h:span"/>
   <x:expect label="it should return the xml:id in the id" test="/h:span/@id = 'd1e32'"/>
   <x:expect label="it should return the roles as classes" test="/h:span/@class = 'a anchor b c'"/>
   <x:expect label="it should not return any other attributes" test="empty(/*/@* except (/*/@id | /*/@class))"/>
   <x:expect label="it should be empty" test="empty(/*/node())"/>
</x:scenario>

<x:scenario label="When converting an emphasis element with a bold role">
  <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
    <emphasis role="bold">This is strongly emphasized</emphasis>
  </x:context>
  <x:expect xmlns="http://www.w3.org/1999/xhtml" label="it should return a strong element">
    <strong class="bold">This is strongly emphasized</strong>
  </x:expect>
</x:scenario>

   <x:scenario label="When converting a code element">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <code>This is a code element.</code>
      </x:context>
      <x:expect label="it should return a single code element" test="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="the name shouldn't become a class" test="empty(/*/@class)"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except /*/@class)"/>
      <x:expect label="it should return the correct text" test=". = 'This is a code element.'"/>
   </x:scenario>

   <x:scenario label="When converting a code element with an xml:id and roles">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <code xml:id="d15e0" role="b a b c">This is a code element.</code>
      </x:context>
      <x:expect label="it should return a single code element" test="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="it should return the xml:id in the id" test="/*/@id = 'd15e0'"/>
      <x:expect label="it should return the roles as classes" test="/*/@class = 'a b c'"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except (/*/@id | /*/@class))"/>
      <x:expect label="it should return the correct text" test=". = 'This is a code element.'"/>
   </x:scenario>

   <x:scenario label="When converting a quote element">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <quote>This is a quote element.</quote>
      </x:context>
      <x:expect label="it should return a single q element" test="count(/*) = 1 and local-name(/*[1]) = 'q' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="the name shouldn't become a class" test="empty(/*/@class)"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except /*/@class)"/>
      <x:expect label="it should return the correct text" test=". = 'This is a quote element.'"/>
   </x:scenario>

   <x:scenario label="When converting a quote element with an xml:id and roles">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <quote xml:id="d80e0" role="b a b c">This is a quote element.</quote>
      </x:context>
      <x:expect label="it should return a single q element" test="count(/*) = 1 and local-name(/*[1]) = 'q' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="it should return the xml:id in the id" test="/*/@id = 'd80e0'"/>
      <x:expect label="it should return the roles as classes" test="/*/@class = 'a b c'"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except (/*/@id | /*/@class))"/>
      <x:expect label="it should return the correct text" test=". = 'This is a quote element.'"/>
   </x:scenario>

   <x:scenario label="When converting a subscript element">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <subscript>This is a subscript element.</subscript>
      </x:context>
      <x:expect label="it should return a single sub element" test="count(/*) = 1 and local-name(/*[1]) = 'sub' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="the name shouldn't become a class" test="empty(/*/@class)"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except /*/@class)"/>
      <x:expect label="it should return the correct text" test=". = 'This is a subscript element.'"/>
   </x:scenario>

   <x:scenario label="When converting a subscript element with an xml:id and roles">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <subscript xml:id="d85e0" role="b a b c">This is a subscript element.</subscript>
      </x:context>
      <x:expect label="it should return a single sub element" test="count(/*) = 1 and local-name(/*[1]) = 'sub' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="it should return the xml:id in the id" test="/*/@id = 'd85e0'"/>
      <x:expect label="it should return the roles as classes" test="/*/@class = 'a b c'"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except (/*/@id | /*/@class))"/>
      <x:expect label="it should return the correct text" test=". = 'This is a subscript element.'"/>
   </x:scenario>

   <x:scenario label="When converting a superscript element">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <superscript>This is a superscript element.</superscript>
      </x:context>
      <x:expect label="it should return a single sup element" test="count(/*) = 1 and local-name(/*[1]) = 'sup' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="the name shouldn't become a class" test="empty(/*/@class)"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except /*/@class)"/>
      <x:expect label="it should return the correct text" test=". = 'This is a superscript element.'"/>
   </x:scenario>

   <x:scenario label="When converting a superscript element with an xml:id and roles">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <superscript xml:id="d86e0" role="b a b c">This is a superscript element.</superscript>
      </x:context>
      <x:expect label="it should return a single sup element" test="count(/*) = 1 and local-name(/*[1]) = 'sup' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="it should return the xml:id in the id" test="/*/@id = 'd86e0'"/>
      <x:expect label="it should return the roles as classes" test="/*/@class = 'a b c'"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except (/*/@id | /*/@class))"/>
      <x:expect label="it should return the correct text" test=". = 'This is a superscript element.'"/>
   </x:scenario>

   <x:scenario label="When converting a tag element">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <tag>This is a tag element.</tag>
      </x:context>
      <x:expect label="it should return a single code element" test="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="it should return the DocBook name as the class" test="/*/@class = 'tag tag-element'"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except /*/@class)"/>
      <x:expect label="it should return the correct text" test=". = 'This is a tag element.'"/>
   </x:scenario>
   <x:scenario label="When converting a tag element with an xml:id and roles">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <tag xml:id="d84e0" role="b a b c">This is a tag element.</tag>
      </x:context>
      <x:expect label="it should return a single code element" test="count(/*) = 1 and local-name(/*[1]) = 'code' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="it should return the xml:id in the id" test="/*/@id = 'd84e0'"/>
      <x:expect label="it should return the roles as classes" test="/*/@class = 'a b c tag tag-element'"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except (/*/@id | /*/@class))"/>
      <x:expect label="it should return the correct text" test=". = 'This is a tag element.'"/>
   </x:scenario>

   <x:scenario label="When converting a personname element">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <personname>This is a personname element.</personname>
      </x:context>
      <x:expect label="it should return a single span element" test="count(/*) = 1 and local-name(/*[1]) = 'span' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="it should return the DocBook name as the class" test="/*/@class = 'first-last personname'"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except /*/@class)"/>
      <x:expect label="it should return the correct text" test=". = 'This is a personname element.'"/>
   </x:scenario>
   <x:scenario label="When converting a personname element with an xml:id and roles">
      <x:context xmlns="http://docbook.org/ns/docbook" mode="m:docbook">
         <personname xml:id="d71e0" role="b a b c">This is a personname element.</personname>
      </x:context>
      <x:expect label="it should return a single span element" test="count(/*) = 1 and local-name(/*[1]) = 'span' and namespace-uri(/*[1]) = 'http://www.w3.org/1999/xhtml'"/>
      <x:expect label="it should return the xml:id in the id" test="/*/@id = 'd71e0'"/>
      <x:expect label="it should return the roles as classes" test="/*/@class = 'a b c first-last personname'"/>
      <x:expect label="it should not return any other attributes" test="empty(/*/@* except (/*/@id | /*/@class))"/>
      <x:expect label="it should return the correct text" test=". = 'This is a personname element.'"/>
   </x:scenario>

</x:description>
